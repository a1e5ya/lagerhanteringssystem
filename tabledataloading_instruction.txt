Overview
We'll create or update three dedicated server-side proxy scripts:

admin/get_products.php (already created)
api/get_public_products.php (for index.php)
admin/get_list_products.php (for lists.php)

These scripts will provide consistent data loading while respecting the different table structures and purposes of each page.
Implementation Plan for Each Script
1. admin/get_products.php (Already Implemented)
This script handles:

Products for admin search page
All product statuses
Searching across multiple fields
Category filtering
Sorting and pagination
HTML rendering for admin table structure

2. api/get_public_products.php (For index.php)
Purpose
Handle data loading for the public-facing index.php page, showing only available products.
Implementation Steps

Create the script file:

php<?php
/**
 * Get Public Products
 * 
 * Server-side script to handle product data for public index page
 */

define('BASE_PATH', dirname(__DIR__));
require_once BASE_PATH . '/config/config.php';
require_once BASE_PATH . '/includes/functions.php';
require_once BASE_PATH . '/includes/Formatter.php';

// Set header to JSON
header('Content-Type: application/json');

// Get parameters
$search = isset($_GET['search']) ? $_GET['search'] : '';
$category = isset($_GET['category']) ? $_GET['category'] : '';
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
$limit = isset($_GET['limit']) ? (int)$_GET['limit'] : 20;
$sort = isset($_GET['sort']) ? $_GET['sort'] : 'title';
$order = isset($_GET['order']) && strtolower($_GET['order']) === 'desc' ? 'desc' : 'asc';

// Create formatter instance
$formatter = new Formatter();

try {
    // Build SQL query similar to get_products.php but with:
    // - Only show available products (status = 1)
    // - Adjust SQL for public visibility needs
    // - Modify JOIN structure as needed
    // - Always add "WHERE p.status = 1" condition
    
    // Process products with formatter
    
    // Generate HTML with public table structure
    // (Different from admin structure - clickable rows to singleproduct.php)
    
    // Return JSON response with:
    // - Formatted product data
    // - HTML for direct insertion
    // - Pagination details
    // - Success status
}
catch (Exception $e) {
    // Return error response
}

Key Features:

Only show available products (status = 1)
Format product data appropriately for public view
Generate HTML with public table structure
Include clickable rows to singleproduct.php
Support sorting by various columns
Properly handle special character searching
Support category filtering


Integration with index.php:

Modify existing AJAX calls to use the new endpoint
Ensure pagination, sorting and filtering still work with the new endpoint
Maintain compatibility with existing JavaScript functions



3. admin/get_list_products.php (For lists.php)
Purpose
Handle specialized list filtering and batch operations for the admin lists page.
Implementation Steps

Create the script file:

php<?php
/**
 * Get List Products
 * 
 * Server-side script to handle product data for admin lists page
 */

define('BASE_PATH', dirname(__DIR__));
require_once BASE_PATH . '/config/config.php';
require_once BASE_PATH . '/includes/functions.php';
require_once BASE_PATH . '/includes/auth.php';
require_once BASE_PATH . '/includes/Formatter.php';

// Check if user is authenticated
checkAuth(2); // Admin or Editor role required

// Set header to JSON
header('Content-Type: application/json');

// Get list-specific parameters
$search = isset($_GET['search']) ? $_GET['search'] : '';
$category = isset($_GET['category']) ? $_GET['category'] : '';
$genre = isset($_GET['genre']) ? $_GET['genre'] : '';
$condition = isset($_GET['condition']) ? $_GET['condition'] : '';
$status = isset($_GET['status']) ? $_GET['status'] : 'all';
$special_price = isset($_GET['special_price']) && $_GET['special_price'] === 'true';
$rare = isset($_GET['rare']) && $_GET['rare'] === 'true';
$recommended = isset($_GET['recommended']) && $_GET['recommended'] === 'true';
$no_price = isset($_GET['no_price']) && $_GET['no_price'] === 'true';
$min_price = isset($_GET['min_price']) ? $_GET['min_price'] : '';
$max_price = isset($_GET['max_price']) ? $_GET['max_price'] : '';
$date_from = isset($_GET['date_from']) ? $_GET['date_from'] : '';
$date_to = isset($_GET['date_to']) ? $_GET['date_to'] : '';
$year_threshold = isset($_GET['year_threshold']) ? $_GET['year_threshold'] : '';

$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
$limit = isset($_GET['limit']) ? (int)$_GET['limit'] : 15;
$sort = isset($_GET['sort']) ? $_GET['sort'] : 'title';
$order = isset($_GET['order']) && strtolower($_GET['order']) === 'desc' ? 'desc' : 'asc';

// Create formatter instance
$formatter = new Formatter();

try {
    // Build SQL query with complex filtering logic
    // Handle all the list-specific filters
    
    // Process products with formatter
    
    // Generate HTML with list table structure
    // (Different from both admin search and public - includes checkboxes)
    
    // Return JSON response with:
    // - Formatted product data
    // - HTML for direct insertion
    // - Pagination details
    // - Success status
}
catch (Exception $e) {
    // Return error response
}

Key Features:

Support all lists-specific filters (special price, rare, recommended, etc.)
Allow complex filter combinations
Include checkbox column for batch operations
Support price range filtering
Support date range filtering
Year threshold filtering
Return specifically formatted HTML for lists page table


Integration with lists.php:

Update AJAX calls in lists.js to use the new endpoint
Maintain batch operation functionality
Ensure sorting and filtering compatibility



Integration Steps
For each of the three pages, follow these steps to integrate the new proxy scripts:
For index.php:

Locate the existing AJAX call in pagination.js or main.js
Update the endpoint URL to point to the new api/get_public_products.php
Test to ensure existing functionality still works
Add any missing features (e.g., sorting if not already implemented)

For search.php:

Already implemented with admin/get_products.php
If needed, add support for sorting similar to index.php

For lists.php:

Locate AJAX calls in lists.js
Update to use the new admin/get_list_products.php endpoint
Ensure batch operations still work properly
Test all filter combinations
Add sorting if not already implemented

Testing Plan
For each script:

Functionality Testing:

Test search with various terms
Test filtering with different combinations
Test pagination
Test sorting by each column


Performance Testing:

Verify response times with large datasets
Check memory usage


Error Handling:

Test with invalid inputs
Verify error messages are helpful


Integration Testing:

Ensure each script works with its corresponding page
Verify that existing JavaScript functions still work
Test all user interactions



Time Estimation

api/get_public_products.php: ~2-3 hours (creation and testing)
admin/get_list_products.php: ~3-4 hours (more complex filtering logic)
Integration testing: ~2 hours

Total: ~7-9 hours for complete implementation
Conclusion
This approach allows us to:

Standardize the data loading mechanism with dedicated server-side scripts
Keep the existing table structures and JavaScript functionality intact
Improve performance with optimized database queries
Maintain the distinct purposes and features of each page

The success of our search.php implementation proves this is a viable approach. By extending it to the other pages, we'll have a more robust, maintainable system without disrupting the existing user experience.